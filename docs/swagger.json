{
    "swagger": "2.0",
    "info": {
        "description": "This API provides endpoints for managing cars.",
        "title": "Cars Go API",
        "contact": {},
        "version": "0.0.1"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/cars": {
            "get": {
                "description": "Retrieves all cars optionally filtered and paginated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve all cars",
                "operationId": "get-all-cars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Optional filter to apply",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Optional page number for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing the list of cars",
                        "schema": {
                            "$ref": "#/definitions/handler.successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid page number format",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds multiple cars using their registration numbers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add multiple cars",
                "operationId": "add-cars",
                "parameters": [
                    {
                        "description": "Array of car registration numbers",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.addCarRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the addition of cars",
                        "schema": {
                            "$ref": "#/definitions/handler.successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add cars or internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/cars/{id}": {
            "put": {
                "description": "Updates a car by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a car",
                "operationId": "update-car",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New car data",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Car"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the update",
                        "schema": {
                            "$ref": "#/definitions/handler.successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid car ID format or JSON payload",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a car by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a car",
                "operationId": "delete-car",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response indicating the deletion",
                        "schema": {
                            "$ref": "#/definitions/handler.successResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid car ID format",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.addCarRequestBody": {
            "type": "object",
            "properties": {
                "regNums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.errorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handler.successResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Car": {
            "type": "object",
            "properties": {
                "mark": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/model.People"
                },
                "regNum": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "model.People": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}